import React, { useState, useEffect, useMemo } from 'react';
import DataDiscover from '../../components/data-discover/DataDiscover';
// JSON verisini import et
import allVideos from '../../data/explore.json'; 

// üìå Sabitler
const SEEN_VIDEOS_KEY = 'seenVideosHistory';
const EXPIRATION_DURATION = 14 * 24 * 60 * 60 * 1000; // 14 g√ºn (2 hafta) milisaniye cinsinden

// Rastgele index se√ßmek i√ßin yardƒ±mcƒ± fonksiyon (Artƒ±k ID'ler ile √ßalƒ±≈üacak)
const getRandomUnseenVideo = (videoList, seenIds) => {
    // G√∂r√ºlmemi≈ü videolarƒ± filtrele
    const unseenVideos = videoList.filter(video => !seenIds.includes(video.id));

    if (unseenVideos.length === 0) {
        return null; // T√ºm videolar g√∂r√ºld√º
    }

    // G√∂r√ºlmemi≈ü videolardan rastgele birini se√ß
    const randomIndex = Math.floor(Math.random() * unseenVideos.length);
    return unseenVideos[randomIndex];
};

// üìå localStorage'ƒ± y√∂neten yardƒ±mcƒ± fonksiyonlar
const updateSeenVideosHistory = (newVideoId) => {
    try {
        const storedData = localStorage.getItem(SEEN_VIDEOS_KEY);
        let history = storedData ? JSON.parse(storedData) : {};
        
        // Yeni videonun ID'sini ve g√ºncel zaman damgasƒ±nƒ± ekle/g√ºncelle
        history[newVideoId] = Date.now();
        
        localStorage.setItem(SEEN_VIDEOS_KEY, JSON.stringify(history));
    } catch (e) {
        console.error("Local storage'a yazma hatasƒ±:", e);
    }
};

const getAndCleanSeenVideos = (videoList) => {
    try {
        const storedData = localStorage.getItem(SEEN_VIDEOS_KEY);
        let history = storedData ? JSON.parse(storedData) : {};
        const now = Date.now();
        const expirationTime = EXPIRATION_DURATION;

        let cleanedHistory = {};
        let seenIds = [];

        // 1. S√ºresi dolanlarƒ± temizle
        // 2. Halihazƒ±rda var olmayan (JSON'dan silinmi≈ü) ID'leri temizle
        const validVideoIds = videoList.map(v => v.id);

        for (const id in history) {
            const timestamp = history[id];
            
            // S√ºresi dolmamƒ±≈ü VE JSON'da halen var olan video ID'lerini koru
            if (now - timestamp < expirationTime && validVideoIds.includes(id)) {
                cleanedHistory[id] = timestamp;
                seenIds.push(id);
            }
        }
        
        localStorage.setItem(SEEN_VIDEOS_KEY, JSON.stringify(cleanedHistory));
        return seenIds;
    } catch (e) {
        console.error("Local storage'dan okuma/temizleme hatasƒ±:", e);
        return []; // Hata durumunda bo≈ü liste d√∂nd√ºr
    }
};


function DataTestPage() {
    const videoList = useMemo(() => allVideos, []);
    
    // [video_id_1, video_id_2, ...] gibi ziyaret edilen video ID'lerinin sƒ±rasƒ± (Session History)
    const [history, setHistory] = useState([]); 
    
    // Ge√ßmi≈üteki hangi videodayƒ±z. (history[currentIndex] o anki videonun ID'si)
    const [currentIndex, setCurrentIndex] = useState(-1); 
    
    // O an g√∂sterilen videonun verisi
    const [currentVideoData, setCurrentVideoData] = useState(null);

    // üìå 1. useEffect: Local Storage Temizliƒüi ve ƒ∞lk Video Y√ºkleme
    useEffect(() => {
        if (videoList.length === 0) return;

        // G√∂r√ºlm√º≈ü ve s√ºresi dolmamƒ±≈ü ID'leri al
        const seenIds = getAndCleanSeenVideos(videoList); 

        // G√∂r√ºlmemi≈ü rastgele bir video bul
        const initialVideo = getRandomUnseenVideo(videoList, seenIds);

        if (initialVideo) {
            // Yeni ge√ßmi≈üi olu≈ütur ve local storage'ƒ± g√ºncelle
            setHistory([initialVideo.id]);
            setCurrentIndex(0);
            setCurrentVideoData(initialVideo);
            updateSeenVideosHistory(initialVideo.id);
        } else {
            // Eƒüer t√ºm videolar g√∂r√ºld√ºyse, listenin en ba≈üƒ±ndan ba≈üla (veya √∂zel bir mesaj g√∂ster)
            console.log("T√ºm videolar g√∂r√ºld√º, ba≈ütan ba≈ülƒ±yor.");
            const firstVideo = videoList[0];
            setHistory([firstVideo.id]);
            setCurrentIndex(0);
            setCurrentVideoData(firstVideo);
            // Bu durumda updateSeenVideosHistory'i √ßaƒüƒ±rmƒ±yoruz, √ß√ºnk√º zaten g√∂r√ºlm√º≈ü.
        }
    }, [videoList]); // videoList deƒüi≈ütiƒüinde sadece bir kez √ßalƒ±≈üƒ±r

    // üìå 2. useEffect: History veya currentIndex deƒüi≈ütiƒüinde mevcut videoyu g√ºncelle
    useEffect(() => {
        if (currentIndex >= 0 && currentIndex < history.length) {
            const videoId = history[currentIndex];
            const video = videoList.find(v => v.id === videoId);
            
            if (video) {
                setCurrentVideoData(video);
            } else {
                // Eƒüer history'de olmayan bir ID varsa (normalde olmamalƒ±)
                setCurrentVideoData(null);
            }
        }
    }, [currentIndex, history, videoList]);


    // A≈üaƒüƒ± (Sonraki) Butonu: Rastgele, daha √∂nce gelmeyen yeni video getirir (veya ge√ßmi≈üte ileri gider).
    const handleNext = () => {
        if (currentIndex < history.length - 1) {
            // Ge√ßmi≈üte ileri git
            setCurrentIndex(prev => prev + 1);
        } else {
            // Ge√ßmi≈üin sonundaysa, yeni rastgele video getir
            const seenIds = getAndCleanSeenVideos(videoList); 
            const newVideo = getRandomUnseenVideo(videoList, [...seenIds, ...history]); // Ge√ßerli oturumdaki videolarƒ± da ekle

            if (newVideo) {
                setHistory(prev => [...prev, newVideo.id]);
                setCurrentIndex(prev => prev + 1);
                updateSeenVideosHistory(newVideo.id);
            } else {
                console.log("T√ºm videolar g√∂sterildi. Daha fazla yeni video yok.");
            }
        }
    };

    // Yukarƒ± (√ñnceki) Butonu: Ge√ßmi≈üteki bir √∂nceki videoyu getirir.
    const handlePrev = () => {
        if (currentIndex > 0) {
            setCurrentIndex(prev => prev - 1);
        }
    };
    
    // Y√ºkleme durumu
    if (!currentVideoData) {
        return <div style={{height:'100vh', display:'flex', justifyContent:'center', alignItems:'center', color:'white', backgroundColor:'#1a1a1a'}}>
            <p>Video verileri y√ºkleniyor veya g√∂sterilecek yeni video yok...</p>
        </div>;
    }

    return (
        // DataDiscover'a gerekli bilgileri prop olarak ge√ß
        <DataDiscover
            data={currentVideoData}
            onNext={handleNext}
            onPrev={handlePrev}
            isPrevDisabled={currentIndex === 0}
            // T√ºm videolar g√∂r√ºld√º ve ge√ßmi≈üin sonundaysa Next butonu disabled olur.
            isNextDisabled={history.length === videoList.length && currentIndex === history.length - 1} 
        />
    );
}

export default DataTestPage;